Давайте поговорим об услугах по симфонии.

Какие услуги.

Это просто классы PHP, которые делают что-то полезное для нас.

Это могут быть классы, которые доступны после установки симфонии, а также наши собственные классы.

А после выполнения индекса посмотрите PHP-файл, который локализуется в публичной папке папки symphony.

структура.

Эти классы могут храниться в служебном контейнере, а также в контейнере PHP, который содержит

более старые экземпляры классов PHP.

Эти классы могут быть такими, как, например, пляжный класс класса Mailer, используемый для операций с базой данных, или наш

собственный класс и эти классы называются сервисами, один из способов помещения сервиса в сервис

Контейнер создает класс PHP и помещает его в папку src с соответствующим пространством имен с этим

Ключевое слово namespace в PHP.

И для симфонии достаточно поставить наш сервис в сервисный контейнер.

Если мы впервые используем наш сервис, то это позже, если мы захотим использовать наш

сервис во второй раз симфонии он будет принимать эту услугу из сервисного контейнера без

необходимо создать новый экземпляр этого класса обслуживания, потому что создается новый экземпляр нашего сервиса

когда мы используем его в первый раз.

Но, очевидно, есть некоторые исключения из этого правила.

Например, скажем, у нас есть класс подключения к базе данных, и как только он у нас есть, нам не нужно подключаться

в базу данных каждый раз, когда мы хотим использовать базу данных в нашем скрипте BHP.

Достаточно подключиться к базе данных только один раз за одно выполнение индекса.

Файл BHP, который локализован в общей папке в структуре симфонической папки

как получить сервисы из сервисного контейнера в симфонии с помощью внедрения зависимостей, которые в симфонии

4 отражается так называемым.

Это достигается путем помещения нашего сервиса в метод контроллера в качестве аргумента, который я собираюсь показать

Вы через мгновение.

И нам не нужно создавать экземпляр нашего сервиса вручную.

Симфония сделает это для нас.

Итак, скажем, что они хотели создать мой собственный сервис.

Теперь, прежде чем я сделаю это, я собираюсь создать только код этого сервиса в этом контроллере и методе и

позже я перенесу этот код в файл, так что покажу вам шаг за шагом, как сервисы и сервисы

содержат их работу в этом контроллере методом.

Как вы помните, при использовании этого маршрута отображаются эти страницы, и у меня в базе данных четыре пользователя, скажем,

Я хочу, чтобы у моих пользователей были подарки, поэтому я собираюсь создавать дары переменной, например, цветы

машина пианино и деньги, и давайте предположим, что я хочу назначить каждому пользователю какой-то случайный подарок так

Я могу я могу рандомизировать свою таблицу, используя функцию случайного выбора.

Это встроенная функция BHP, и в качестве аргумента эта функция будет принимать мою созданную таблицу и

Я собираюсь создать третью переменную, которую я назначу на мой взгляд

давайте посмотрим случайный подарок и значение моей переменной подарки, так что давайте откроем этот файл просмотра

и у нас есть имя пользователя здесь и скажем, вы выиграли и название подарка.

И в этом у вас есть случайный подарок переменная Абеля, но это, очевидно, массив, поэтому он не может

оставь это так.

Я должен предоставить здесь некоторые ключи и в симфонической настройке цикла for у меня есть доступный индекс цикла

переменная, которая хранит текущий индекс каждой итерации цикла for, но индекс цикла начинается с единицы

но, как вы, наверное, знаете, индекс массива в BHP начинается с нуля, и из-за этого я также доступен

в симфоническом цикле индекс нулевой переменной.

Очевидно, я не упомянул об этом в лекции, где я обсуждал взгляды на симфонию, потому что я

не собираюсь охватывать всю документацию в этой части дискурса более симфоническими функциями, а также

обширные симфонические черты.

Я собираюсь использовать некоторое время при создании приложений в этих оценках.

Первое приложение очень простое в использовании, а второе - расширенное приложение для видео.

подписка с помощью PayPal давайте сохраним его и посмотрим эффекты, и это работает, если они продолжают обновлять

стр.

Я случайно назначил подарки своим пользователям.

Итак, теперь представьте, что если бы у меня было больше раундов и больше методов контроллера, тем больше страниц поддержки в моем

веб-сайт, и если бы я хотел сделать что-то подобное для других методов контроллера, то я бы

придется повторить этот код, потому что мой сервис может состоять из гораздо большего количества вызываемых, чем здесь, и это

не будет хорошей идеей повторять этот код в каждом методе контроллера.

И именно поэтому я собираюсь создать свой первый сервис сейчас, сначала я собираюсь создать папку для своих сервисов.

Например, услугии первый файл в нем.

Допустим, служба подарков BHP BHP открывает пространство имен Dag

вверх и название четырехбуквенных услуг и класса.

Имя класса должно совпадать с именем файла.

Так классные подарки.

Служба сейчас.

Позволь мне переместить мое пальто.

Из моего сервиса в мой недавно созданный сервисный файл.

Но здесь у нас есть класс пиковой страницы, поэтому я не могу так его оставить.

Я должен поставить публичный или защищенный или частный.

Вот и перетасуй эти подарки, и, очевидно, я не смогу так их оставить.

Я должен создать некоторый метод, скажем, например, метод конструкции и поместить его внутри нашего метода.

Но доступна ли эта услуга в контейнере услуг сейчас.

Не это не так.

Он доступен только здесь, в папке Searcy, Symphony найдет его и поместит в служебный контейнер.

Если я сделаю здесь так называемую подсказку типа, давайте сохраним наш сервис.

И теперь я собираюсь заняться набором здесь.

Так что обслуживание подарков и это было автоматически важно для меня.

И скажем, в подарках, и вот это все, что мне нужно сделать.

Но здесь я должен назвать эту государственную собственность в порядке.

Потому что это объект

но это массив, и если я сохраню его

это работает, но обратите внимание, что мне не нужно было создавать экземпляр моего сервиса вручную.

Симфония сделала это для меня.

Так работает внешняя проводка в симфонии.

А теперь еще лучше понять, как сервисный контейнер и сервисы работают в симфонии.Я собираюсь создать конструктор в моей конструкции публичной функции контроллера

и я собираюсь повторить этот тип печати здесь, как вы, вероятно, знаете, метод конструктора собирается

быть выполненным в первую очередь перед выполнением метода индекса.

Это основа объектно-ориентированного программирования, и давайте скажем, что я меняю свои подарки на другие ценности.

Например A B C и D и D Я буду жить так, как есть.

И обратите внимание, что произойдет.

Мои подарки были взяты именно отсюда

так вот.

Новый экземпляр подарков.

Класс обслуживания не был создан, поскольку этот сервис уже существует в контейнере службы.

Представьте, насколько это полезно.

Например, мы можем иметь только одно соединение с базой данных и использовать его во всем коде.